metadata:
  platformVersion: 1.0
main: true
name: CafeSupremo_TD2
# Define the variables which will used throughout the dialog flow.
context:
  variables:
    iResult: "nlpresult"
    menu: "MenuType"
    lunchItem: "Lunch"
    snackItem: "Snack"
    menuItem: "FullMenu"
    heatFoodStr: "string"
    heatFood: "YesNo"
    hotFoodStr: "string"
states:
# =========================================================================================
# NLP based transitions to Conversation States
# ========================================================================================= 
  getIntent:
    component: "System.Intent"
    properties:
      variable: "iResult"
      confidenceThreshold: 0.4
    transitions:
      actions:
        SayHello2Bot: "repondToGreeting"
        SayGoodbye2Bot: "signOffBot"
        OrderFood: "getFoodOrder"
        Intent.None: "confused"
        
# =========================================================================================
# Simple Greeting to Bot or direct order specification
# =========================================================================================   
  repondToGreeting:
    component: "System.Output"
    properties:
      text: "Hello ${profile.firstName} how can I help you today?"
    transitions:
      return: "getIntent"
  getFoodOrder:
    component: "System.Output"
    properties:
      text: "${profile.firstName} I can help with that!"
      keepTurn: true
    transitions: {}
    
# =========================================================================================
# Determine what information has been given in Utterance and set Menu Type implicitly
# =========================================================================================    
  gaveMenuType:
    component: "System.SetVariable"
    properties:
      variable: "menu"
      value: "${iResult.value.entityMatches['MenuType'][0]}"
    transitions: {}
    
  gaveLunchOption:
    component: "System.SetVariable"
    properties:
      variable: "lunchItem"
      value: "${iResult.value.entityMatches['Lunch'][0]}"
    transitions: {}  
    
  checkIfLunchItem:
    component: "System.ConditionEquals"
    properties:
      variable: "lunchItem"
      value: null
    transitions:
      actions:
        equal: "gaveSnackOption"
        notequal: "getFoodHeatedOption"

      
  gaveSnackOption:
    component: "System.SetVariable"
    properties:
      variable: "snackItem"
      value: "${iResult.value.entityMatches['Snack'][0]}"
    transitions: {}
    
  checkIfSnackItem:
    component: "System.ConditionEquals"
    properties:
      variable: "snackItem"
      value: null
    transitions:
      actions:
        equal: "getMenuType"
        notequal: "getFoodHeatedOption"
        
# =========================================================================================
# Ask for the desired menu Type if not already specified
# =========================================================================================    
  getMenuType:
    component: "System.Text"
    properties:
      prompt: "What Type of food are you after?\nJust a snack or some lunch?"
      variable: "menu"
    transitions: {}

# =========================================================================================
# Show the Appropriate Menu based on selection 
# LAB CHANGE - will be replaced with the Custom Component
# 
#  showMenu:
#    component: "getFoodMenu"
#    properties: 
#      menuSlotVar: ${menuItem.value}
#      menuOption: ${menu.value}
#    transitions:
#      actions:
#        success: "getFoodHeatedOption"
# =========================================================================================
  whichMenuToShow:
    component: "System.Switch"
    properties:
      variable: "menu"
      values:
      - "Lunch"
      - "Snack"
    transitions:
      actions:
        Lunch: "showLunchMenu"
        Snack: "showSnackMenu"
        NONE: "showFullMenu"

  showSnackMenu:
    component: "System.List"
    properties:
      options: ${snackItem.type.enumValues}
      prompt: "Enjoy a choice from our tasty Bakegoods menu"
      variable: "menuItem"
    transitions:
      next: "getFoodHeatedOption"

  showLunchMenu:
    component: "System.List"
    properties:
      options: ${lunchItem.type.enumValues}
      prompt: "Enjoy a choice from our filling Lunch menu"
      variable: "menuItem"
    transitions:
      next: "getFoodHeatedOption"

  showFullMenu:
    component: "System.List"
    properties:
      options: ${menuItem.type.enumValues}
      prompt: "Enjoy a selection from our extensive choice of delicious food"
      variable: "menuItem"
    transitions: {}
    
    
# =========================================================================================
# Having Chosen Food Item ask it should be heated and serve it up with appropriate message
# ========================================================================================= 
  getFoodHeatedOption:
    component: "System.List"
    properties:
      options: "Yes,No"
      prompt: "Would you like that heated up?"
      variable: "heatFoodStr"
  matchFoodHeatedOption:
    component: "System.MatchEntity"
    properties:
      sourceVariable: "heatFoodStr"
      variable: "heatFood"
    transitions:
      actions:
        match: "toggleWarmedMessage"
        nomatch: "getFoodHeatedOption"
  toggleWarmedMessage:
    component: "System.Switch"
    properties:
      variable: "heatFood"
      values:
      - "Yes"
      - "No"
    transitions:
      actions:
        Yes: "setHotFoodStr"
        No: "confirmFoodOrder"
        NONE: "confirmFoodOrder"        
  setHotFoodStr:
    component: "System.SetVariable"
    properties:
      variable: "hotFoodStr"
      value: "Toasty Warm"
  confirmFoodOrder:
    component: "System.Output"
    properties:
      text: "OK ${profile.firstName} done! I hope you enjoy your ${hotFoodStr.value !''} ${menuItem.value}"
    transitions:
      return: "done"
# =========================================================================================
# Say Goodbye
# =========================================================================================  
  signOffBot:
    component: "System.Output"
    properties:
      text: "Thanks ${profile.firstName} for talking to me!  I'll Sign off now..."
    transitions:
      return: "done"
# =========================================================================================
# Unable to determine Intent
# =========================================================================================     
  confused:
    component: "System.Output"
    properties:
      text: "I'm sorry! but I'm a little Confused and I don't understand!"
    transitions:
      return: "getIntent"
# =========================================================================================
# End of Bot Flow
# ========================================================================================= 